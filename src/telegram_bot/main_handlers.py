from aiogram.filters import Command, CommandObject
from aiogram.types import Message, InlineKeyboardButton, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardMarkup
from src.telegram_bot.models import (
    save_user,
    is_user_authenticated,
    save_liked_track,
    get_liked_tracks,
)
from src.spotify.client import SpotifyAPI

spotify = SpotifyAPI()


async def start_command_handler(message: Message, db_pool):
    """
    Handler for /start command.
    """
    telegram_id = message.from_user.id
    username = message.from_user.username

    await save_user(db_pool, telegram_id, username)
    await db_pool.log_all_users()
    welcome_text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n\n"
        "–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
        "- –ù–∞—Ö–æ–¥–∏—Ç—å –∏ –≤–∫–ª—é—á–∞—Ç—å –º—É–∑—ã–∫—É\n"
        "- –õ–∞–π–∫–∞—Ç—å –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–µ—Å—è —Ç—Ä–µ–∫–∏ –∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç—ã\n\n"
        "–ù–∞—á–Ω–∏—Ç–µ —Å –≤–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥—ã /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ."
    )
    await message.answer(welcome_text)


async def help_command_handler(message: Message):
    """
    Handler for /help command.
    """
    help_text = (
        "üìñ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "- /start: –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "- /help: –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "- /auth: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\n"
        "- /search —Ç–∏–ø –∑–∞–ø—Ä–æ—Å: –ü–æ–∏—Å–∫ —Ç—Ä–µ–∫–∞, –∞—Ä—Ç–∏—Å—Ç–∞ –∏–ª–∏ –∞–ª—å–±–æ–º–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, /search track Imagine Dragons)\n"
        "- /likes: –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à–∏ –ª–∞–π–∫–Ω—É—Ç—ã–µ —Ç—Ä–µ–∫–∏\n"
        "- /create_playlist –Ω–∞–∑–≤–∞–Ω–∏–µ: –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–µ–π–ª–∏—Å—Ç\n"
        "- /rename_playlist —Å—Ç–∞—Ä–æ–µ_–Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–µ_–Ω–∞–∑–≤–∞–Ω–∏–µ: –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–ª–µ–π–ª–∏—Å—Ç\n"
        "- /delete_playlist –Ω–∞–∑–≤–∞–Ω–∏–µ: –£–¥–∞–ª–∏—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç\n"
        "- /add_to_playlist –Ω–∞–∑–≤–∞–Ω–∏–µ_–ø–ª–µ–π–ª–∏—Å—Ç–∞ track_id: –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–∫ –≤ –ø–ª–µ–π–ª–∏—Å—Ç\n"
        "- /remove_from_playlist –Ω–∞–∑–≤–∞–Ω–∏–µ_–ø–ª–µ–π–ª–∏—Å—Ç–∞ track_id: –£–¥–∞–ª–∏—Ç—å —Ç—Ä–µ–∫ –∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞\n"
        "- /playlists: –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≤–∞—à–∏ –ø–ª–µ–π–ª–∏—Å—Ç—ã (–∫–∞–∂–¥—ã–π –ø–ª–µ–π–ª–∏—Å—Ç ‚Äî –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ)\n\n"
    )
    await message.answer(help_text, parse_mode="HTML")


async def auth_command_handler(message: Message, db_pool):
    """
    Handler for /auth command. Checks and returns message if user is authenticated.
    """
    telegram_id = message.from_user.id
    authenticated = await is_user_authenticated(db_pool, telegram_id)
    await db_pool.log_all_users()
    if authenticated:
        await message.answer("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã!")
    else:
        await message.answer(
            "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
        )


async def search_command_handler(message: Message, command: CommandObject, db_pool):
    """
    Handler for /search command. Finds track, artist and album names in Spotify.
    Sends each track as a separate message with a "Like" button.
    """
    if not command.args:
        await message.reply(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞ (track, artist, album) –∏ –∑–∞–ø—Ä–æ—Å. –ü—Ä–∏–º–µ—Ä: /search track Imagine Dragons"
        )
        return

    args = command.args.split(maxsplit=1)
    if len(args) < 2:
        await message.reply(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞ (track, artist, album) –∏ –∑–∞–ø—Ä–æ—Å. –ü—Ä–∏–º–µ—Ä: /search track Imagine Dragons"
        )
        return

    search_type, query = args
    if search_type not in {"track", "artist", "album"}:
        await message.reply(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ø–æ–∏—Å–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–∏–Ω –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö: track, artist, album. –ü—Ä–∏–º–µ—Ä: /search track Imagine Dragons"
        )
        return

    try:
        results = spotify.search(query, search_type=search_type, limit=5)
    except Exception as e:
        await message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Spotify API: {e}")
        return

    items = results.get(f"{search_type}s", {}).get("items", [])
    if not items:
        await message.reply("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å.")
        return

    for idx, item in enumerate(items, start=1):
        if search_type == "track":
            track_id = item.get("id", "Unknown ID")
            track_name = item.get("name", "Unknown Track")
            artists = ", ".join(artist["name"] for artist in item.get("artists", []))
            album_name = item.get("album", {}).get("name", "Unknown Album")

            response = (
                f"{idx}. **{track_name}**\n"
                f"   - –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å(–∏): {artists}\n"
                f"   - –ê–ª—å–±–æ–º: {album_name}\n"
            )

            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text=f"‚ù§Ô∏è –õ–∞–π–∫: {track_name}",
                            callback_data=f"like:{track_id}",
                        )
                    ]
                ]
            )

            await message.answer(response, reply_markup=keyboard, parse_mode="Markdown")
        elif search_type == "artist":
            name = item.get("name", "Unknown Artist")
            genres = ", ".join(item.get("genres", []))
            response = f"{idx}. **{name}**\n   - –ñ–∞–Ω—Ä—ã: {genres or '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}\n\n"
            await message.answer(response, parse_mode="Markdown")
        elif search_type == "album":
            name = item.get("name", "Unknown Album")
            artists = ", ".join(artist["name"] for artist in item.get("artists", []))
            release_date = item.get("release_date", "Unknown Date")
            response = (
                f"{idx}. **{name}**\n"
                f"   - –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å(–∏): {artists}\n"
                f"   - –î–∞—Ç–∞ —Ä–µ–ª–∏–∑–∞: {release_date}\n"
            )
            await message.answer(response, parse_mode="Markdown")


async def like_track_callback_handler(callback_query: CallbackQuery, db_pool):
    """
    Handler for liking a track via inline button.
    """
    data = callback_query.data
    if not data.startswith("like:"):
        await callback_query.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–µ–π—Å—Ç–≤–∏—è.", show_alert=True)
        return

    _, track_id = data.split(":", 1)
    user_id = callback_query.from_user.id

    try:
        track = spotify.get_track(track_id)
        track_name = track.get("name", "Unknown Track")
        artists = ", ".join(artist["name"] for artist in track.get("artists", []))
        album_name = track.get("album", {}).get("name", "Unknown Album")

        await save_liked_track(
            db_pool, user_id, track_id, track_name, artists, album_name
        )
        await callback_query.answer(
            f"–¢—Ä–µ–∫ '{track_name}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à–∏ –ª–∞–π–∫–∏!", show_alert=True
        )
    except Exception as e:
        await callback_query.answer(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–µ–∫–∞: {e}", show_alert=True
        )


async def likes_command_handler(message: Message, db_pool):
    """
    Handler for /likes command. Displays the user's liked tracks.
    """
    user_id = message.from_user.id
    liked_tracks = await get_liked_tracks(db_pool, user_id)

    if not liked_tracks:
        await message.reply(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ª–∞–π–∫–Ω—É—Ç—ã—Ö —Ç—Ä–µ–∫–æ–≤. –ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /search –∏ –ª–∞–π–∫–Ω–∏—Ç–µ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–µ—Å—è —Ç—Ä–µ–∫–∏!"
        )
        return

    response = "–í–∞—à–∏ –ª–∞–π–∫–Ω—É—Ç—ã–µ —Ç—Ä–µ–∫–∏:\n\n"
    for idx, track in enumerate(liked_tracks, start=1):
        response += f"{idx}. **{track['track_name']}**\n   - –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å(–∏): {track['artist_name']}\n   - –ê–ª—å–±–æ–º: {track['album_name']}\n\n"

    await message.reply(response, parse_mode="Markdown")


def register_main_handlers(dp):
    dp.message.register(start_command_handler, Command("start"))
    dp.message.register(help_command_handler, Command("help"))
    dp.message.register(auth_command_handler, Command("auth"))
    dp.message.register(search_command_handler, Command("search"))
    dp.message.register(likes_command_handler, Command("likes"))
    dp.callback_query.register(
        like_track_callback_handler, lambda call: call.data.startswith("like:")
    )
