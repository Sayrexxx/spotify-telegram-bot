from aiogram.filters import Command
from aiogram.types import Message
from src.telegram_bot.models import save_user, is_user_authenticated


async def start_command_handler(message: Message, db_pool):
    """
    Handler for /start command.
    """
    telegram_id = message.from_user.id
    username = message.from_user.username

    await save_user(db_pool, telegram_id, username)
    await db_pool.log_all_users()
    welcome_text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n\n"
        "–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
        "- –ù–∞—Ö–æ–¥–∏—Ç—å –∏ –≤–∫–ª—é—á–∞—Ç—å –º—É–∑—ã–∫—É\n"
        "- –õ–∞–π–∫–∞—Ç—å –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–µ—Å—è —Ç—Ä–µ–∫–∏ –∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç—ã\n\n"
        "–ù–∞—á–Ω–∏—Ç–µ —Å –≤–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥—ã /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ."
    )
    await message.answer(welcome_text)


async def help_command_handler(message: Message):
    """
    Handler for /help command.
    """
    help_text = (
        "üìñ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "- /start: –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "- /help: –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "- /auth: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\n\n"
    )
    await message.answer(help_text, parse_mode="HTML")


async def auth_command_handler(message: Message, db_pool):
    """
    Handler for /auth command. Checks and returns message if user is authenticated.
    """
    telegram_id = message.from_user.id
    authenticated = await is_user_authenticated(db_pool, telegram_id)
    await db_pool.log_all_users()
    if authenticated:
        await message.answer("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã!")
    else:
        await message.answer(
            "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
        )


def register_handlers(dp):
    dp.message.register(start_command_handler, Command("start"))
    dp.message.register(help_command_handler, Command("help"))
    dp.message.register(auth_command_handler, Command("auth"))
